{
  "breadcrumbs.enabled": false,
  "breadcrumbs.icons": false,
  "chat.agent.enabled": true,
  "chat.commandCenter.enabled": false,
  "chat.detectParticipant.enabled": true,
  "chat.editor.fontFamily": "'Dank Mono', 'BlexMono Nerd Font', 'JetBrainsMono Nerd Font', 'JetBrains Mono','Fira Code', 'Droid Sans Mono', 'monospace', monospace",
  "chat.edits2.enabled": true,
  "chat.promptFilesLocations": {
    ".github/prompts": true,
    "/Users/vscode/repos/prompts": true
  },
  "chat.renderRelatedFiles": true,
  "cSpell.diagnosticLevel": "Hint",
  "cSpell.language": "en,en-US,fr,fr-FR,de-DE",
  "cSpell.userWords": [
    "coderabbit",
    "commitlint"
  ],
  "debug.inlineValues": "on",
  "diffEditor.ignoreTrimWhitespace": false,
  "diffEditor.renderSideBySide": false,
  "editor.acceptSuggestionOnEnter": "smart",
  "editor.accessibilitySupport": "off",
  "editor.cursorBlinking": "expand",
  "editor.cursorSmoothCaretAnimation": "on",
  "editor.fontFamily": "'Dank Mono', 'BlexMono Nerd Font', 'JetBrainsMono Nerd Font', 'JetBrains Mono','Fira Code', 'Droid Sans Mono', 'monospace', monospace",
  "editor.fontLigatures": true,
  "editor.fontSize": 13,
  "editor.fontWeight": "300",
  "editor.guides.bracketPairs": "active",
  "editor.inlineSuggest.fontFamily": "'Dank Mono', 'BlexMono Nerd Font', 'JetBrainsMono Nerd Font', 'JetBrains Mono','Fira Code', 'Droid Sans Mono', 'monospace', monospace",
  "editor.linkedEditing": true,
  "editor.minimap.enabled": false,
  "editor.rulers": [
    150
  ],
  "editor.scrollbar.horizontal": "hidden",
  "editor.suggest.showSnippets": false,
  "editor.suggest.showWords": false,
  "editor.suggestFontSize": 13,
  "editor.tabSize": 2,
  "editor.wordWrap": "on",
  "errorLens.fontFamily": "'Dank Mono', 'BlexMono Nerd Font', 'JetBrainsMono Nerd Font', 'JetBrains Mono','Fira Code', 'Droid Sans Mono', 'monospace', monospace",
  "errorLens.fontWeight": "300",
  "errorLens.searchForProblemQuery": "https://duckduckgo.com/?q=$message",
  "eslint.lintTask.enable": true,
  "explorer.confirmDelete": false,
  "explorer.confirmDragAndDrop": false,
  "explorer.confirmPasteNative": false,
  "explorer.fileNesting.enabled": true,
  "explorer.fileNesting.expand": false,
  "explorer.fileNesting.patterns": {
    ".clang-tidy": ".clang-format, .clangd, compile_commands.json",
    ".env": "*.env, .env.*, .envrc, env.d.ts, env.*",
    ".env.development": "*.env, .env.*, .envrc, env.d.ts, env.*",
    ".eslintrc": ".eslint*",
    ".gitignore": ".gitattributes, .gitmodules, .gitmessage, .mailmap, .git-blame*",
    ".prettierrc": ".prettierignore",
    ".project": ".classpath",
    "*.asax": "$(capture).*.cs, $(capture).*.vb",
    "*.ascx": "$(capture).*.cs, $(capture).*.vb",
    "*.ashx": "$(capture).*.cs, $(capture).*.vb",
    "*.aspx": "$(capture).*.cs, $(capture).*.vb",
    "*.bloc.dart": "$(capture).event.dart, $(capture).state.dart",
    "*.c": "$(capture).h",
    "*.cc": "$(capture).hpp, $(capture).h, $(capture).hxx",
    "*.cjs": "$(capture).cjs.map, $(capture).*.cjs, $(capture)_*.cjs",
    "*.component.ts": "$(capture).component.html, $(capture).component.spec.ts, $(capture).component.css, $(capture).component.scss, $(capture).component.sass, $(capture).component.less",
    "*.cpp": "$(capture).hpp, $(capture).h, $(capture).hxx",
    "*.cs": "$(capture).*.cs",
    "*.cshtml": "$(capture).cshtml.cs",
    "*.csproj": "*.config, *proj.user, appsettings.*, bundleconfig.json",
    "*.css": "$(capture).css.map, $(capture).*.css",
    "*.cxx": "$(capture).hpp, $(capture).h, $(capture).hxx",
    "*.dart": "$(capture).freezed.dart, $(capture).g.dart",
    "*.db": "${capture}.${extname}-*",
    "*.db3": "${capture}.${extname}-*",
    "*.ex": "$(capture).html.eex, $(capture).html.heex, $(capture).html.leex",
    "*.go": "$(capture)_test.go",
    "*.java": "$(capture).class",
    "*.js": "$(capture).js.map, $(capture).*.js, $(capture)_*.js",
    "*.jsx": "$(capture).js, $(capture).*.jsx, $(capture)_*.js, $(capture)_*.jsx, $(capture).less, $(capture).module.less $(capture).scss, $(capture).module.scss, $(capture).css, $(capture).module.css",
    "*.master": "$(capture).*.cs, $(capture).*.vb",
    "*.mdx": "$(capture).jpg, $(capture).png, $(capture).svg",
    "*.mjs": "$(capture).mjs.map, $(capture).*.mjs, $(capture)_*.mjs",
    "*.mts": "$(capture).mts.map, $(capture).*.mts, $(capture)_*.mts",
    "*.pubxml": "$(capture).pubxml.user",
    "*.resx": "$(capture).*.resx, $(capture).designer.cs, $(capture).designer.vb",
    "*.s3db": "${capture}.${extname}-*",
    "*.sdb": "${capture}.${extname}-*",
    "*.sqlite": "${capture}.${extname}-*",
    "*.sqlite3": "${capture}.${extname}-*",
    "*.tex": "$(capture).acn, $(capture).acr, $(capture).alg, $(capture).aux, $(capture).bbl, $(capture).blg, $(capture).fdb_latexmk, $(capture).fls, $(capture).glg, $(capture).glo, $(capture).gls, $(capture).idx, $(capture).ind, $(capture).ist, $(capture).lof, $(capture).log, $(capture).lot, $(capture).out, $(capture).pdf, $(capture).synctex.gz, $(capture).toc, $(capture).xdv",
    "*.ts": "$(capture).js, $(capture).d.ts.map, $(capture).*.ts, $(capture)_*.js, $(capture)_*.ts",
    "*.tsx": "$(capture).ts, $(capture).*.tsx, $(capture)_*.ts, $(capture)_*.tsx, $(capture).less, $(capture).module.less $(capture).scss, $(capture).module.scss, $(capture).css, $(capture).module.css",
    "*.vbproj": "*.config, *proj.user, appsettings.*, bundleconfig.json",
    "*.vue": "$(capture).*.ts, $(capture).*.js, $(capture).story.vue",
    "*.xaml": "$(capture).xaml.cs",
    "+layout.svelte": "+layout.ts,+layout.ts,+layout.js,+layout.server.ts,+layout.server.js,+layout.gql",
    "+page.svelte": "+page.server.ts,+page.server.js,+page.ts,+page.js,+page.gql",
    "artisan": ".babelrc*, .codecov, .cssnanorc*, .envrc, .htmlnanorc*, .lighthouserc.*, .mocha*, .postcssrc*, .terserrc*, api-extractor.json, ava.config.*, babel.config.*, contentlayer.config.*, cssnano.config.*, cypress.*, env.d.ts, formkit.config.*, formulate.config.*, histoire.config.*, htmlnanorc.*, i18n.config.*, jasmine.*, jest.config.*, jsconfig.*, karma*, lighthouserc.*, playwright.config.*, postcss.config.*, puppeteer.config.*, rspack.config.*, server.php, svgo.config.*, tailwind.config.*, tsconfig.*, tsdoc.*, uno.config.*, unocss.config.*, vitest.config.*, vuetify.config.*, webpack.config.*, webpack.mix.js, windi.config.*",
    "astro.config.*": "*.env, .babelrc*, .codecov, .cssnanorc*, .env.*, .envrc, .htmlnanorc*, .lighthouserc.*, .mocha*, .postcssrc*, .terserrc*, api-extractor.json, ava.config.*, babel.config.*, contentlayer.config.*, cssnano.config.*, cypress.*, env.d.ts, formkit.config.*, formulate.config.*, histoire.config.*, htmlnanorc.*, i18n.config.*, jasmine.*, jest.config.*, jsconfig.*, karma*, lighthouserc.*, playwright.config.*, postcss.config.*, puppeteer.config.*, rspack.config.*, svgo.config.*, tailwind.config.*, tsconfig.*, tsdoc.*, uno.config.*, unocss.config.*, vitest.config.*, vuetify.config.*, webpack.config.*, windi.config.*",
    "BUILD.bazel": "*.bzl, *.bazel, *.bazelrc, bazel.rc, .bazelignore, .bazelproject, WORKSPACE",
    "cargo.toml": ".clippy.toml, .rustfmt.toml, cargo.lock, clippy.toml, cross.toml, rust-toolchain.toml, rustfmt.toml",
    "CMakeLists.txt": "*.cmake, *.cmake.in, .cmake-format.yaml, CMakePresets.json",
    "composer.json": ".php*.cache, composer.lock, phpunit.xml*, psalm*.xml",
    "default.nix": "shell.nix",
    "deno.json*": "*.env, .env.*, .envrc, api-extractor.json, deno.lock, env.d.ts, import-map.json, import_map.json, jsconfig.*, tsconfig.*, tsdoc.*",
    "Dockerfile": ".dockerignore, docker-compose.*, Dockerfile*",
    "eas.json": ".easignore",
    "eslint.config.js": ".eslint*",
    "flake.nix": "flake.lock",
    "gatsby-config.*": "*.env, .babelrc*, .codecov, .cssnanorc*, .env.*, .envrc, .htmlnanorc*, .lighthouserc.*, .mocha*, .postcssrc*, .terserrc*, api-extractor.json, ava.config.*, babel.config.*, contentlayer.config.*, cssnano.config.*, cypress.*, env.d.ts, formkit.config.*, formulate.config.*, gatsby-browser.*, gatsby-node.*, gatsby-ssr.*, gatsby-transformer.*, histoire.config.*, htmlnanorc.*, i18n.config.*, jasmine.*, jest.config.*, jsconfig.*, karma*, lighthouserc.*, playwright.config.*, postcss.config.*, puppeteer.config.*, rspack.config.*, svgo.config.*, tailwind.config.*, tsconfig.*, tsdoc.*, uno.config.*, unocss.config.*, vitest.config.*, vuetify.config.*, webpack.config.*, windi.config.*",
    "gemfile": ".ruby-version, gemfile.lock",
    "global.d.ts": "*.d.ts",
    "go.mod": ".air*, go.sum",
    "go.work": "go.work.sum",
    "hatch.toml": ".editorconfig, .flake8, .isort.cfg, .python-version, hatch.toml, requirements*.in, requirements*.pip, requirements*.txt, tox.ini",
    "I*.cs": "$(capture).cs",
    "jest.config.*": "jest.*",
    "mix.exs": ".credo.exs, .dialyzer_ignore.exs, .formatter.exs, .iex.exs, .tool-versions, mix.lock",
    "next.config.*": ".babelrc*, .codecov, .cssnanorc*, .htmlnanorc*, .lighthouserc.*, .mocha*, .postcssrc*, .terserrc*, api-extractor.json, ava.config.*, babel.config.*, cssnano.config.*, cypress.*, env.d.ts, formkit.config.*, formulate.config.*, histoire.config.*, htmlnanorc.*, i18n.config.*, jasmine.*, jsconfig.*, karma*, lighthouserc.*, next-i18next.config.*, puppeteer.config.*, rspack.config.*, svgo.config.*, tsdoc.*, uno.config.*, unocss.config.*, vuetify.config.*, webpack.config.*, windi.config.*",
    "nuxt.config.*": "*.env, .babelrc*, .codecov, .cssnanorc*, .env.*, .envrc, .htmlnanorc*, .lighthouserc.*, .mocha*, .nuxtignore, .postcssrc*, .terserrc*, api-extractor.json, ava.config.*, babel.config.*, contentlayer.config.*, cssnano.config.*, cypress.*, env.d.ts, formkit.config.*, formulate.config.*, histoire.config.*, htmlnanorc.*, i18n.config.*, jasmine.*, jest.config.*, jsconfig.*, karma*, lighthouserc.*, playwright.config.*, postcss.config.*, puppeteer.config.*, rspack.config.*, svgo.config.*, tailwind.config.*, tsconfig.*, tsdoc.*, uno.config.*, unocss.config.*, vitest.config.*, vuetify.config.*, webpack.config.*, windi.config.*",
    "package.json": ".browserslist*, .circleci*, .cz-config.js, .czrc, .dlint.json, .dprint.json, .firebase*, .flowconfig, .github*, .gitpod*, .huskyrc*, .jslint*, .markdownlint*, .node-version, .nodemon*, .npm*, .nvmrc, .pm2*, .pnp.*, .pnpm*, .sentry*, .simple-git-hooks*, .stackblitz*, .styleci*, .tazerc*, .textlint*, .tool-versions, .travis*, .versionrc*, .vscode*, .watchman*, .xo-config*, .yamllint*, .yarnrc*, Procfile, apollo.config.*, appveyor*, azure-pipelines*, bower.json, build.config.*, bun.lockb, crowdin*, dangerfile*, dlint.json, dprint.json, electron-builder.*, firebase.json, grunt*, gulp*, jenkins*, lerna*, netlify*, nodemon*, npm-shrinkwrap.json, nx.*, package-lock.json, package.nls*.json, phpcs.xml, pm2.*, pnpm*, pullapprove*, pyrightconfig.json, release-please*.json, release-tasks.sh, release.config.*, renovate*, rollup.config.*, rspack*, simple-git-hooks*, tslint*, tsup.config.*, turbo*, typedoc*, vetur.config.*, webpack*, workspace.json, xo.config.*, yarn*",
    "Pipfile": ".editorconfig, .flake8, .isort.cfg, .python-version, Pipfile, Pipfile.lock, requirements*.in, requirements*.pip, requirements*.txt, tox.ini",
    "prettier.config.mjs": ".prettierignore",
    "pubspec.yaml": ".metadata, .packages, all_lint_rules.yaml, analysis_options.yaml, build.yaml, pubspec.lock, pubspec_overrides.yaml, .flutter-plugins, .flutter-plugins-dependencies, .packages, .dart_tool/package_config.json, .dart_tool/package_config_subset.json, .dart_tool/version, .dart_tool/version.lock",
    "pyproject.toml": ".editorconfig, .flake8, .isort.cfg, .pdm-python, .pdm.toml, .python-version, MANIFEST.in, Pipfile, Pipfile.lock, hatch.toml, pdm.lock, poetry.lock, poetry.lock*, pyproject.toml, requirements*.in, requirements*.pip, requirements*.txt, setup.cfg, setup.py, tox.ini",
    "quasar.conf.js": "*.env, .babelrc*, .codecov, .cssnanorc*, .env.*, .envrc, .htmlnanorc*, .lighthouserc.*, .mocha*, .postcssrc*, .terserrc*, api-extractor.json, ava.config.*, babel.config.*, contentlayer.config.*, cssnano.config.*, cypress.*, env.d.ts, formkit.config.*, formulate.config.*, histoire.config.*, htmlnanorc.*, i18n.config.*, jasmine.*, jest.config.*, jsconfig.*, karma*, lighthouserc.*, playwright.config.*, postcss.config.*, puppeteer.config.*, quasar.extensions.json, rspack.config.*, svgo.config.*, tailwind.config.*, tsconfig.*, tsdoc.*, uno.config.*, unocss.config.*, vitest.config.*, vuetify.config.*, webpack.config.*, windi.config.*",
    "readme*": "authors, backers*, changelog*, citation*, code_of_conduct*, codeowners, contributing*, contributors, copying*, credits, governance.md, history.md, license*, maintainers, readme*, security.md, sponsors*, architecture*, preview.png",
    "remix.config.*": "*.env, .babelrc*, .codecov, .cssnanorc*, .env.*, .envrc, .htmlnanorc*, .lighthouserc.*, .mocha*, .postcssrc*, .terserrc*, api-extractor.json, ava.config.*, babel.config.*, contentlayer.config.*, cssnano.config.*, cypress.*, env.d.ts, formkit.config.*, formulate.config.*, histoire.config.*, htmlnanorc.*, i18n.config.*, jasmine.*, jest.config.*, jsconfig.*, karma*, lighthouserc.*, playwright.config.*, postcss.config.*, puppeteer.config.*, remix.*, rspack.config.*, svgo.config.*, tailwind.config.*, tsconfig.*, tsdoc.*, uno.config.*, unocss.config.*, vitest.config.*, vuetify.config.*, webpack.config.*, windi.config.*",
    "requirements.txt": ".editorconfig, .flake8, .isort.cfg, .python-version, requirements*.in, requirements*.pip, requirements*.txt, tox.ini",
    "rush.json": ".browserslist*, .circleci*, .commitlint*, .cz-config.js, .czrc, .dlint.json, .dprint.json, .editorconfig, .eslint*, .firebase*, .flowconfig, .github*, .gitlab*, .gitpod*, .huskyrc*, .jslint*, .lintstagedrc*, .markdownlint*, .node-version, .nodemon*, .npm*, .nvmrc, .pm2*, .pnp.*, .pnpm*, .prettier*, .release-please*.json, .releaserc*, .sentry*, .simple-git-hooks*, .stackblitz*, .styleci*, .stylelint*, .tazerc*, .textlint*, .tool-versions, .travis*, .versionrc*, .vscode*, .watchman*, .xo-config*, .yamllint*, .yarnrc*, Procfile, apollo.config.*, appveyor*, azure-pipelines*, bower.json, build.config.*, bun.lockb, commitlint*, crowdin*, dangerfile*, dlint.json, dprint.json, electron-builder.*, eslint*, firebase.json, grunt*, gulp*, jenkins*, lerna*, lint-staged*, nest-cli.*, netlify*, nodemon*, npm-shrinkwrap.json, nx.*, package-lock.json, package.nls*.json, phpcs.xml, pm2.*, pnpm*, prettier*, pullapprove*, pyrightconfig.json, release-please*.json, release-tasks.sh, release.config.*, renovate*, rollup.config.*, rspack*, simple-git-hooks*, stylelint*, tslint*, tsup.config.*, turbo*, typedoc*, unlighthouse*, vercel*, vetur.config.*, webpack*, workspace.json, xo.config.*, yarn*",
    "setup.cfg": ".editorconfig, .flake8, .isort.cfg, .python-version, MANIFEST.in, requirements*.in, requirements*.pip, requirements*.txt, setup.cfg, tox.ini",
    "setup.py": ".editorconfig, .flake8, .isort.cfg, .python-version, MANIFEST.in, requirements*.in, requirements*.pip, requirements*.txt, setup.cfg, setup.py, tox.ini",
    "shims.d.ts": "*.d.ts",
    "svelte.config.*": "*.env, .babelrc*, .codecov, .cssnanorc*, .env.*, .envrc, .htmlnanorc*, .lighthouserc.*, .mocha*, .postcssrc*, .terserrc*, api-extractor.json, ava.config.*, babel.config.*, contentlayer.config.*, cssnano.config.*, cypress.*, env.d.ts, formkit.config.*, formulate.config.*, histoire.config.*, houdini.config.*, htmlnanorc.*, i18n.config.*, jasmine.*, jest.config.*, jsconfig.*, karma*, lighthouserc.*, mdsvex.config.js, playwright.config.*, postcss.config.*, puppeteer.config.*, rspack.config.*, svgo.config.*, tailwind.config.*, tsconfig.*, tsdoc.*, uno.config.*, unocss.config.*, vite.config.*, vitest.config.*, vuetify.config.*, webpack.config.*, windi.config.*",
    "tsconfig.json": "tsconfig*",
    "vercel.json": ".vercelignore",
    "vite.config.*": ".babelrc*, .codecov, .cssnanorc*, .envrc, .htmlnanorc*, .lighthouserc.*, .mocha*, .postcssrc*, .terserrc*, api-extractor.json, ava.config.*, babel.config.*, contentlayer.config.*, cssnano.config.*, cypress.*, env.d.ts, formkit.config.*, formulate.config.*, histoire.config.*, htmlnanorc.*, i18n.config.*, jasmine.*, jest.config.*, jsconfig.*, karma*, lighthouserc.*, playwright.config.*, postcss.config.*, puppeteer.config.*, rspack.config.*, svgo.config.*, tailwind.config.*, tsconfig.*, tsdoc.*, uno.config.*, unocss.config.*, vitest.config.*, vuetify.config.*, webpack.config.*, windi.config.*",
    "vue.config.*": "*.env, .babelrc*, .codecov, .cssnanorc*, .env.*, .envrc, .htmlnanorc*, .lighthouserc.*, .mocha*, .postcssrc*, .terserrc*, api-extractor.json, ava.config.*, babel.config.*, contentlayer.config.*, cssnano.config.*, cypress.*, env.d.ts, formkit.config.*, formulate.config.*, histoire.config.*, htmlnanorc.*, i18n.config.*, jasmine.*, jest.config.*, jsconfig.*, karma*, lighthouserc.*, playwright.config.*, postcss.config.*, puppeteer.config.*, rspack.config.*, svgo.config.*, tailwind.config.*, tsconfig.*, tsdoc.*, uno.config.*, unocss.config.*, vitest.config.*, vuetify.config.*, webpack.config.*, windi.config.*"
  },
  "extensions.ignoreRecommendations": true,
  "git.autofetch": "all",
  "git.blame.editorDecoration.enabled": true,
  "git.blame.editorDecoration.template": "${subject}, ${authorName} (${authorDateAgo}) - ${hashShort}",
  "git.branchProtection": [
    "main",
    "master",
    "develop",
    "staging",
    "dev",
    "release"
  ],
  "git.branchValidationRegex": "^(?:(feat|hotfix|bugfix)/[A-Z]*-?[0-9]{1,5}-[a-z0-9]+(?:-[a-z0-9]+)*|release/[0-9]+\\.[0-9]+\\.[0-9]+)$",
  "git.confirmSync": false,
  "git.mergeEditor": true,
  "git.openRepositoryInParentFolders": "never",
  "git.suggestSmartCommit": false,
  "github.copilot.chat.agent.runTasks": true,
  "github.copilot.chat.codesearch.enabled": true,
  "github.copilot.chat.commitMessageGeneration.instructions": [
    {
      "text": "Generate a concise conventional commit message based on the following diff. \nThe commit message should follow the format: <type>[optional scope]: <description> [blank line] [body] [blank line] [footer] \n\nTypes include:\n- feat: A new feature\n- fix: A bug fix\n- docs: Documentation changes\n- style: Code style changes (formatting, missing semicolons, etc)\n- refactor: Code changes that neither fix bugs nor add features\n- perf: Performance improvements\n- test: Adding or modifying tests\n- build: Changes to build system or dependencies\n- ci: Changes to CI configuration or scripts\n- chore: Other changes that don't modify src or test files\n\nGuidelines:\n1. Use imperative, present tense (e.g., \"change\" not \"changed\" or \"changes\")\n2. Don't capitalize the first letter\n3. No period at the end\n4. Keep it under 50 characters\n5. Focus on WHAT changed and WHY, not HOW\n6. Reference relevant issue numbers if applicable (e.g., \"#123\")\n8. Scope should be in parentheses and describe the section of code affected \n9. Description should be in present tense, lowercase, and under 70 characters\n10. Body (optional) should explain the what and why (not how), always use markdown list format, lowercase sentences and lines under 100 characters. \n11. Footer (optional) should reference issues/PRs or breaking changes Breaking change format."
    }
  ],
  "github.copilot.chat.completionContext.typescript.mode": "on",
  "github.copilot.chat.editor.temporalContext.enabled": true,
  "github.copilot.chat.edits.temporalContext.enabled": true,
  "github.copilot.chat.followUps": "always",
  "github.copilot.chat.generateTests.codeLens": true,
  "github.copilot.chat.newWorkspaceCreation.enabled": true,
  "github.copilot.chat.pullRequestDescriptionGeneration.instructions": [
    {
      "text": ""
    }
  ],
  "github.copilot.chat.reviewSelection.enabled": true,
  "github.copilot.chat.search.semanticTextResults": true,
  "github.copilot.nextEditSuggestions.enabled": true,
  "github.copilot.nextEditSuggestions.fixes": true,
  "github.copilot.renameSuggestions.triggerAutomatically": true,
  "github.copilot.selectedCompletionModel": "gpt-4o-copilot",
  "github.showAvatar": true,
  "githubIssues.issueBranchTitle": "feat/${issueNumber}-${sanitizedIssueTitle}",
  "githubIssues.queries": [
    {
      "label": "Issues",
      "query": "author:${user} state:open repo:${owner}/${repository} sort:created-desc"
    }
  ],
  "githubPullRequests.createOnPublishBranch": "never",
  "githubPullRequests.experimental.chat": true,
  "githubPullRequests.experimental.notificationsView": true,
  "githubPullRequests.experimental.useQuickChat": true,
  "githubPullRequests.notifications": "pullRequests",
  "githubPullRequests.queries": [],
  "i18n-ally.editor.preferEditor": true,
  "inlineChat.enableV2": true,
  "inlineChat.hideOnRequest": true,
  "javascript.preferences.quoteStyle": "single",
  "mcp": {
    "servers": {
      "Linear": {
        "args": [
          "mcp-remote",
          "https://mcp.linear.app/sse"
        ],
        "command": "npx",
        "type": "stdio"
      }
    }
  },
  "notebook.diff.experimental.toggleInline": true,
  "scm.inputFontFamily": "'Dank Mono', 'BlexMono Nerd Font', 'JetBrainsMono Nerd Font', 'JetBrains Mono','Fira Code', 'Droid Sans Mono', 'monospace', monospace",
  "search.experimental.closedNotebookRichContentResults": true,
  "terminal.integrated.fontFamily": "'Dank Mono', 'BlexMono Nerd Font', 'JetBrainsMono Nerd Font', 'JetBrains Mono', 'Fira Code', 'Droid Sans Mono', 'monospace', monospace",
  "terminal.integrated.fontLigatures.enabled": true,
  "terminal.integrated.fontSize": 13,
  "terminal.integrated.gpuAcceleration": "on",
  "terminal.integrated.suggest.enabled": true,
  "terminal.integrated.suggest.quickSuggestions": {
    "arguments": "on",
    "commands": "on",
    "unknown": "off"
  },
  "typescript.experimental.expandableHover": true,
  "typescript.preferences.quoteStyle": "single",
  "typescript.updateImportsOnFileMove.enabled": "always",
  "vim.easymotion": true,
  "vim.enableNeovim": true,
  "vim.hlsearch": true,
  "vim.incsearch": true,
  "vim.leader": "<space>",
  "vim.useCtrlKeys": true,
  "vim.useSystemClipboard": true,
  "window.commandCenter": false,
  "window.title": "${activeEditorShort}",
  "workbench.activityBar.location": "top",
  "workbench.colorTheme": "Monospace Dark",
  "workbench.editor.enablePreview": false,
  "workbench.editor.labelFormat": "short",
  "workbench.iconTheme": "monospace-icons",
  "workbench.layoutControl.enabled": false,
  "workbench.navigationControl.enabled": false,
  "workbench.productIconTheme": "material-product-icons",
  "workbench.secondarySideBar.showLabels": false,
  "workbench.settings.editor": "json",
  "workbench.sideBar.location": "right",
  "workbench.startupEditor": "none"
}